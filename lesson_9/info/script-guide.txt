================================================= Зміст ========================================================================//
1__Підключення скріпта
2__Літерали
3__Змінні
4__Локальні зміни
5__Опис констант 
6__Виведення даних
7__Введення значення змінних
8__Перетворення з рядка число
9__Числа
10__Метод округлюваня числа
11__Арифметичні вирази
12__Нескінченість
13__Math
+1 =========================================== Підключення скріпта =================================================================//
<script src="./script.js"></script> - завантаження сторінки призупинеться, поки скрипт не буде виконано (блокуючий спосіб)

<script async src="./script.js"></script> - атрибуть async  завантаження сторінки не призупинеться, поки скрипт не буде виконано
 (не блокуючий спосіб не буде чекати, якщо будуть два файли поспіль і він другий.. то виконається одразу як завантажиться)

<script defer src="./script.js"></script> - атрибуть defer завантаження сторінки не призупинеться, поки скрипт не буде виконано 
  (не блокуючий спосіб, буде чекати якщо він по списку другий і перший завантажився.)

+2 ======================================================= Літерали ==========================================================================//
літерали це -це явно вказане значення декого типу . 
-- true або folse - логічні летерали
-- 128, -89, 100 - цілий тип літералів, у дисятковій системи числення звичне нам число.
-- 25.69, 5.2, 145.058 - дійсного типу ц форматі з фіксованною крапкою. що розділяє цілу, і дробову частину.
-- 25.6е9, 5е2, 145е8 (25.6*10у дев'ятій степені, 5*10у другій степені, 145*10у восьмій степені) - це у форматі з плавоючой крапкою
-- "Символьні" - котрі пишуться у лапках. Лапки не мають різницю можна писати як одинарні '', так і подвійні "". 
-- /n, /t, /' - прості ескейп послідовності. службові символи починаються зі- /; 
   /n - перехід на новий рядок
   /t, - горизонтальна табуляція
   /' - апостроф
-- `текст .. ${якесь значення} текст ...` - зворотні лапки , це шаблонні лапки. використовуються для шаблонів.

+3 ======================================================= Змінні ==========================================================================//
змінна - це іменованна область пам'яті, призначена для зображеня певних даних, які можуть змінюватися. Для використання змінних їх слід описати
або (оголосити)
-- як глобальна змінна  (як властивість window);
-- за допомогою var;
-- за допомогою let;

ім'я кожної змінної повинно бути унікальним правильним індетефікатором:
повинен містити букви латинського алфавіту, цифри та символи "$", "_";
не може починатись з цифри, і співпадати з зарезервированимм словами 

правильно так: MyID, indentifier, x, $, abc123, my_id, _true.

неправильні: my id(містить пробіл); ok!(містить заборонений знак); 12th(поченається  з цифри); 100(поченається з цифри); for(резервироване слово);

CamelCase - стиль формування індитифікаторів при якому декілька СЛІВ  ПИШУТЬСЯ РАЗОМ (БЕЗ ПРОБІЛІВ) І ПРИ ЦЬОМУ КОЖНЕ НОВЕ СЛОВО ПОЧИНАЄТЬСЯ З 
ВЕЛИКОЇ  літери 
--UpperCamelCase - перша велика 
--lowerCamelCase - перша маленька (Краще писатитак , пишуть усі про)

приклади : myAge, myName, blackCat, totalSum .. і так далі.

+4 ======================================================= Локальні зміни ==========================================================================//
іноді треба описати змінну, яка буде видима (доступна) тільки в межах блоку (в межах чиклу, умовного оператора чи блоку. описангого з
 використанням фігурних дужок) :
 {
  ..блок..
 }
для цього треба описати ці змінні з використанням let :

загальна форма
{ 
  let назва змінної
} 

приклад як виглядає:
{
  let a;
  a=23;
  let b,c;
  ...
  a=a+5 <- доступ можливий до змінної бо в середені об'явлена.
}
але якщо написати назву змінної за межами :
a = 9; то у такому випадку ... це буде помилка. Змінна не буде доступна.

А Л Е ...  Якщо написати змінну через var  ... то воно дужки ігнорує. 

+5 ======================================================= Опис констант ==========================================================================//
константи описуються за допомогою оператора const :
загальна форма const: НАЗВА ЇЇ = значення; (const RATE = 15;)

Константи на відміну від змінних не можуть зиінювати своє значення. Традиційно імена констант записують великими літерами.
Snake case - стиль (нотація) формування індентифікаторів, коли окремі слова у назві відділяються  чимволом нижнього підкреслення ("_")
при цьому слова можуть писатись як малкенькими, так і великими літерами. У богатьох мовах програмування пишуть саме таким стилем.

приклад: SCREAMING_SNAKE, MAX_WIDTH, LOWER_BOUND ;
const MAX_WIDTH = 123;

коли використовуються : 
-- коли є константи велечини, значення які не можна змінювати;
-- коли використання літералів у явному вигляді призводить до погіршення читабельності коду;
-- коли є величина, значення якої  визначається один раз  і після не змінюєтья;

+6 ======================================================= Виведення даних ==========================================================================//
Виведення даних може бути багатьма способами : 

-- з використанням діалогового вікна window.alert(); виведе як діалогове вікно (писати window не треба бо воно додається автоматично)
-- виведення у консоль браузера console.log();
-- виведення у html з використанням document.write();
-- виведення в html елемент,  з використанням властивостей innerHtml, innerText;
-- за допомогою форм.

+7 ======================================================= Введення значення змінних ==========================================================================//
для введення значення використовуємо функцію prompt;

prompt (повідомлення, початкове значення);

+8 ======================================================= Перетворення з рядка число ==========================================================================//
parseInt працює так : 10px , він доходить до першої літери і зупеняється. і перетворює з строки в число (10)

parseFloat працює так : наприклад число 3.5 ... то він порахує це з крапкою , тобто parseInt зупиниться на 3
а parseFloat врахує число котре після крпки.

але теба бути уважним метод parseInt та parseFloat використовують для перетвореня даних з типу string у number (якщо початкове значення не string
то воно спочатку переведе у тип даних string)
При цьому треба пам'ятати шо данні, які є меншими за 10(-6 степень) представляють у експененціальній формі. Тому можливі непредбачуванні наслідки.

приклад:
початкова команда let num = parseInt(0.00000007) то воно його перетворить спочатку в string let num = parseInt('7e-8'), та результатом буде 7 ;

додавання + перед строкою .. може не порішати ... приклад '10px' він видасть у консоль NaN (not a number) 

+9 ======================================================= Числа ==========================================================================//
Усі числа в javaScript як цілі так і дробові, мають тип даних number. 
Для запису числа використовують арабскі.
Для ділення дробової частини використовують крапку.
у пам'яті числа зберігаються у форматі IEEE-754 , також відомому як 'doble precision' В ньому на число виділяється рівно 8 байт (64біт)
двійкове значення нескінченних дробів зберігається лише до певного знака, тому виникає неточність. Приклад : 
alert (0.1 + 0.2); то це буде так 0.30000000000000004, а не 0.3 як очікувалось. 
втрата точності відбувається із дуже великими числами: alert(9999999999999999999999); 1е+22

+10 ==================================================== Метод округлюваня числа ==========================================================//
toFixed([кількість знаків після коми]) який округлюе число до задаої точності, і повертає його у вигляді рядка

-- кількість цифр після десяткового знаку  повинна знаходитись у діапазоні від 0 до 20
--якщо не вказанно то вважається рівним 0. Число округлюється при необхідості, і дробова частина доповнюється нулями до потрібної довжини.
--Якщо число більше 1е +21, то метод повертає рядковепредставлення у експоненціальному записі.
приклад: 
var n = 12.345;
alert(n.toFixed (1)); результат : 12.3
--Викликати його можна не тільки у змінних, а й у числових літералів. приклад:
alert((12.345) .toFixed (1)); ну і результат буде : 12.3

+11 =================================================== Арифметичні вирази =============================================================//
Арифметичний вираз - це вираз в результаті обчислення якого одержуємо число. Над числами можна виконувати звичайні арифметичні та деякі 
спеціальні операціі.

***бінарні операціі (в котрих має бути два операнди) :
-- x + y сума
-- x - y різниця
-- x * y добток
-- x / y частка
-- x % y остача від ділення

***унарні (необхідним є один операнд) :
--  -х зміна знаку на протилежний
--  +х збереження знаку
--  х++ Інкремент: збільшення на один i=5; (j= i++); i не сбільшеться на одиницю j=5 i=6
--  ++х Інкремент: збільшення на один i=5; (j= ++i); i  сбільшеться на одиницю j=6 i=6
--  х-- Дикримент: зменшення на один так само як і з інкриментом
--  --х Дикримент: зменшення на один так само як і з інкриментом

+12======================================================= Нескінченість ====================================================================//
--infinity - особливе числове значення, яке поводить себе як матиматична нескінченість.
--infinity більше ніж буль яке число.
--в ризультаті додавання/віднімання/множення/ділення нескінченності на число.. отримуємо нескінченність
--Ділення числа на 0 дає нескінченість
--Відношення числа до нескінченності дає 0
--Також існує мінус нескінченність -infinity. Отримуемо, якщо поділити число на "-0"
--Функція isFinite (n) повертає true тоді, коли n звичайне число, а false якщо n одне зі спец значень : NaN, infinity, чи -infinity

+13======================================================= Math ==============================================================================//
В javaScript немає вбудованих математичних констант та функцій, але вони реалізованні як властивості Math